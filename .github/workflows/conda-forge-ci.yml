name: Test ADAM with conda-forge dependencies

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build-with-conda-forge-dependencies:
    name: '[conda-forge:${{ matrix.os }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Print used environment (no conda) [Conda]
      shell: bash
      run: |
        env
    - name: Get current week
      id: week
      run: echo "week=$(date +%Y-%U)" >> "${GITHUB_OUTPUT}"
    - uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: ci_env.yml
        cache-environment-key: environment-${{ steps.week.outputs.week }}


    - name: Install files to enable compilation of mex files [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      run: |
        curl -L -O https://github.com/robotology/robotology-vcpkg-ports/releases/download/storage/msdk_R2020b_mexa64.zip
        unzip msdk_R2020b_mexa64.zip
        rm msdk_R2020b_mexa64.zip
        echo "GHA_Matlab_ROOT_DIR=${GITHUB_WORKSPACE}/msdk_R2020b_mexa64" >> $GITHUB_ENV
        echo "GHA_Matlab_MEX_EXTENSION=mexa64" >> $GITHUB_ENV

    - name: Install files to enable compilation of mex files [Conda/macOS]
      if: contains(matrix.os, 'macos')
      run: |
        curl -L -O https://github.com/robotology/robotology-vcpkg-ports/releases/download/storage/msdk_R2020a_mexmaci64.zip
        unzip msdk_R2020a_mexmaci64.zip
        rm msdk_R2020a_mexmaci64.zip
        echo "GHA_Matlab_ROOT_DIR=${GITHUB_WORKSPACE}/msdk_R2020a_mexmaci64" >> $GITHUB_ENV
        echo "GHA_Matlab_MEX_EXTENSION=mexmaci64" >> $GITHUB_ENV

    - name: Install files to enable compilation of mex files [Conda/Windows]
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        curl -L -O https://github.com/robotology/robotology-vcpkg-ports/releases/download/storage/msdk_R2020a_mexw64.zip
        unzip msdk_R2020a_mexw64.zip
        rm msdk_R2020a_mexw64.zip
        echo "GHA_Matlab_ROOT_DIR=${GITHUB_WORKSPACE}/msdk_R2020a_mexw64" >> $GITHUB_ENV
        echo "GHA_Matlab_MEX_EXTENSION=mexw64" >> $GITHUB_ENV

    - name: Configure VS Toolchain (Windows)
      if: contains(matrix.os, 'windows')
      uses: ilammy/msvc-dev-cmd@v1.12.1

    - name: Setup compilation env variables [Conda/Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        bash_vc_install=${VCToolsInstallDir//\\//}        
        compiler_path=${bash_vc_install}bin/Hostx64/x64/cl.exe
        echo "CC=${compiler_path}" >> $GITHUB_ENV
        echo "CXX=${compiler_path}" >> $GITHUB_ENV
        echo "CONDA_CXX_LIBRARIES_INSTALL_PREFIX=${CONDA_PREFIX}\Library" >> $GITHUB_ENV
        # Visualizer tests excluded as a workaround for https://github.com/robotology/idyntree/issues/808
        # Python tests excluded as a workaround for https://github.com/robotology/idyntree/issues/939
        # InverseKinematics tests are excluded as a workaround for https://github.com/robotology/idyntree/issues/1019
        # ConsistencyTestiKin tests are excluded as a workaround for https://github.com/robotology/idyntree/issues/1029
        echo "IDYNTREE_TEST_TO_SKIP=Visualizer|matlab|Python|pybind|InverseKinematics|ConsistencyTestiKin" >> $GITHUB_ENV

    - name: Setup compilation env variables [Conda/Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        echo "CONDA_CXX_LIBRARIES_INSTALL_PREFIX=${CONDA_PREFIX}" >> $GITHUB_ENV
        # Visualizer tests excluded as a workaround for https://github.com/robotology/idyntree/issues/808
        echo "IDYNTREE_TEST_TO_SKIP=Visualizer|matlab" >> $GITHUB_ENV

    # Additional dependencies useful only on Linux
    - name: Dependencies [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        micromamba install expat-cos6-x86_64 freeglut libselinux-cos6-x86_64 libxau-cos6-x86_64 libxcb-cos6-x86_64 libxdamage-cos6-x86_64 libxext-cos6-x86_64 libxfixes-cos6-x86_64 libxxf86vm-cos6-x86_64 mesa-libgl-cos6-x86_64 mesa-libgl-devel-cos6-x86_64

    - name: Print used environment [Conda]
      shell: bash -l {0}
      run: |
        micromamba list
        env

    - name: Configure [Conda]
      shell: bash -l {0}
      run: |
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_CXX_LIBRARIES_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DMATLAB_FIND_DEBUG:BOOL=ON -DIDYNTREE_USES_MATLAB:BOOL=ON -DMatlab_ROOT_DIR=${GHA_Matlab_ROOT_DIR} -DMatlab_MEX_EXTENSION:STRING=${GHA_Matlab_MEX_EXTENSION} -DIDYNTREE_DISABLE_MATLAB_TESTS:BOOL=ON -DIDYNTREE_COMPILE_TESTS:BOOL=ON -DIDYNTREE_USES_ASSIMP:BOOL=ON -DIDYNTREE_USES_IPOPT:BOOL=ON -DIDYNTREE_USES_IRRLICHT:BOOL=ON -DIDYNTREE_USES_YARP:BOOL=ON -DIDYNTREE_USES_ICUB_MAIN:BOOL=ON -DIDYNTREE_USES_OSQPEIGEN:BOOL=ON -DIDYNTREE_USES_PYTHON:BOOL=ON -DIDYNTREE_USES_PYTHON_PYBIND11:BOOL=ON  ..

    - name: Build [Conda]
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Inspect libraries linked by iDynTreeMEX.mexa64 [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ldd ./lib/iDynTreeMEX.mexa64

    - name: Test [Conda]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }} -E "${IDYNTREE_TEST_TO_SKIP}" .

    - name: Install [Conda]
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}
